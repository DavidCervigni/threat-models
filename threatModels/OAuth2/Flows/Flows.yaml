#based on: https://datatracker.ietf.org/doc/html/rfc6819

ID: Flows
title: Flows
parent: OAuth2
children:
  - ID: Flows_AuthCode
  - ID: Flows_ImplicitGrant

scope:
  description: This section covers threats that are specific to certain flows utilized
    to obtain access tokens. Each flow is characterized by response types and/or grant
    types on the end-user authorization and token endpoint, respectively.

  diagram:

  assets:
    # - ID: AUTH_SERVER_TOKEN_ENDPOINT
    #   type: endpoint
    #   title: Authorization server token endpoint
    #   description: |
    #     Authorization server's endpoint for DF_AUTH_GRANT_AS and DF_ACCESS_TOKEN_CL
    #   inScope: true


    # - ID: AUTH_SERVER_AUTH_ENDPOINT
    #   type: endpoint
    #   title: Authorization endpoint for resource owner
    #   description: |
    #     Authorization server's endpoint for DF_AUTH_REDIRECT
    #   inScope: true


  assumptions:
    # - ID:
    #   description: |
    #     A Auth server may host several ...

  attackers:
    # - ID: ANONYMOUS
    #   description: |
    #     Anonymous internet user
    #   inScope: true

    # - ID: CLIENT
    #   description: |
    #     Client app
    #   inScope: true
analysis:

 
threats:

  # - ID: 4.3.5_CLIENT_SECRET_BRUTE_FORCE
  #   title: Obtaining Client Secret by Online Guessing
  #   impact: |
  #      Disclosure of a single "client_id"/secret pair.
  #   impacts:
  #     - REFID: CONFIDENTIALITY
  #     - REFID: INTEGRITY
  #   assets:
  #     - REFID: CLIENT_SECRETS
  #   attackers:
  #     - REFID: ANONYMOUS
  #   CVSS:
  #     vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L
  #   threatType: Spoofing, Elevation of privileges, Information Disclosure
  #   attack: |
  #     An attacker may try to guess valid "client_id"/secret pairs.
  #   pentestTestable: true
  #   public: true
  #   fullyMitigated: true
  #   countermeasures:
  #     - ID: 5.1.4.2.2_HIGH_ENTROPY_SECRETS
  #       title: Use High Entropy for Secrets
  #       description: |
  #         When creating secrets not intended for usage by human users (e.g.,
  #         client secrets or token handles), the authorization server should
  #         include a reasonable level of entropy in order to mitigate the risk
  #         of guessing attacks. The token value should be >=128 bits long and
  #         constructed from a cryptographically strong random or pseudo-random
  #         number sequence (see [RFC4086] for best current practice) generated
  #         by the authorization server.
  #       operational: false
  #       inPlace: false
  #       public: true

  #     - ID: 5.1.4.2.3_LOCK_ACCOUNTS
  #       title: Lock Accounts
  #       description: |
  #         Online attacks on passwords can be mitigated by locking the
  #         respective accounts after a certain number of failed attempts.
  #         Note: This measure can be abused to lock down legitimate service users.
  #       operational: false
  #       inPlace: false
  #       public: true       

  #     - ID: 5.2.3.7_STRONG_CLIENT_AUTHENTICATION
  #       title: Use strong client authentication
  #       description: |
  #         By using an alternative form of authentication such as client
  #         assertion [OAuth-ASSERTIONS], the need to distribute a
  #         "client_secret" is eliminated. This may require the use of a secure
  #         private key store or other supplemental authentication system as
  #         specified by the client assertion issuer in its authentication
  #         process. (e.g., client_assertion/client_token)
  #       operational: false
  #       inPlace: false
  #       public: true       
