#based on: https://datatracker.ietf.org/doc/html/rfc6819

ID: OAuth2
title: OAuth 2.0
version: rfc6819
children:
  - ID: Client
  - ID: AuthorizationServer
  - ID: Flows
authors: |
  Example by David Cervigni, based on: https://datatracker.ietf.org/doc/html/rfc6819

# history: |
#   - 2023.1 Draft  2023-07-xx: First release

scope:

  description: |
    Functional objectives:

      - Allow final users (RESOURCE_OWNERS) to integrate services from third party apps **easily** (without credential creation like new accounts/username/password)
      - Allow users to login to new services without explicitly creating a new set of credentials (authorize a new third party service VS authenticate on a third party service)
      - Allows CLIENT (apps) to delegate/abstract/de-scope authentication

      TODO: describe the authz relationship with OPEN ID Connect , holistic real approach from CLIENT development point of view.

      Non-functional requirements:
      - Integrate third party services **securely**

      Reference: https://datatracker.ietf.org/doc/html/rfc6749

      >The OAuth 2.0 authorization framework enables a third-party
        application to obtain limited access to an HTTP service, either on
        behalf of a resource owner by orchestrating an approval interaction
        between the resource owner and the HTTP service, or by allowing the
        third-party application to obtain access on its own behalf.



      There are 3 type of Authorization Grant:

      - Authorization code
      - Implicit
      - Resource owner password credentials
      - Client credentials


      > [1.3](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3).  Authorization Grant
        An authorization grant is a credential representing the resource
        owner's authorization (to access its protected resources) used by the
        client to obtain an access token.  This specification defines four
        grant types -- authorization code, implicit, resource owner password
        credentials, and client credentials -- as well as an extensibility
        mechanism for defining additional types.
        >
      [1.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1).  Authorization Code
        The authorization code is obtained by using an authorization server
        as an intermediary between the client and resource owner.  Instead of
        requesting authorization directly from the resource owner, the client
        directs the resource owner to an authorization server (via its
        user-agent as defined in [[RFC2616](https://datatracker.ietf.org/doc/html/rfc2616)]), which in turn directs the  resource owner back to the client with the authorization code.
        Before directing the resource owner back to the client with the
        authorization code, the authorization server authenticates the
        resource owner and obtains authorization.  Because the resource owner
        only authenticates with the authorization server, the resource
        owner's credentials are never shared with the client.
        The authorization code provides a few important security benefits,
        such as the ability to authenticate the client, as well as the
        transmission of the access token directly to the client without
        passing it through the resource owner's user-agent and potentially
        exposing it to others, including the resource owner.
          [1.3.2](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.2).  Implicit
        The implicit grant is a simplified authorization code flow optimized
        for clients implemented in a browser using a scripting language such
        as JavaScript.  In the implicit flow, instead of issuing the client
        an authorization code, the client is issued an access token directly
        (as the result of the resource owner authorization).  The grant type
        is implicit, as no intermediate credentials (such as an authorization
        code) are issued (and later used to obtain an access token).
        When issuing an access token during the implicit grant flow, the
        authorization server does not authenticate the client.  In some
        cases, the client identity can be verified via the redirection URI
        used to deliver the access token to the client.  The access token may
        be exposed to the resource owner or other applications with access to
        the resource owner's user-agent.
        Implicit grants improve the responsiveness and efficiency of some
        clients (such as a client implemented as an in-browser application),
        since it reduces the number of round trips required to obtain an
        access token.  However, this convenience should be weighed against
        the security implications of using implicit grants, such as those
        described in Sections [10.3](https://datatracker.ietf.org/doc/html/rfc6749#section-10.3) and [10.16](https://datatracker.ietf.org/doc/html/rfc6749#section-10.16), especially when the
        authorization code grant type is available.

      <img src="img/Pasted image 20230702114826.png"/>


  securityObjectives:
    - ID: FULL_CIA
      title: Confidentiality Integrity and availability of a Corda Network
      description: |
        Ability to maintain fundamental confidentiality
        integrity and availability of the system
      group: General security Objectives

    - ID: INTEGRITY
      title: Data integrity
      description: |
        Ability to maintain fundamental integrity of the system
      contributesTo:
        - REFID: FULL_CIA
      group: General security Objectives
    - ID: CONFIDENTIALITY
      title: Data confidentiality
      description: |
        Ability to maintain fundamental confidentiality of the system data
      contributesTo:
        - REFID: FULL_CIA
      group: General security Objectives
    - ID: AVAILABILITY
      title: System availability
      description: |
        Ability to maintain fundamental availability of the system
      contributesTo:
        - REFID: FULL_CIA
      group: General security Objectives
    - ID: COMPLIANCE
      title: Compliance
      description: |
        Ability to obtain and maintain maintain compliance with required regulations
      contributesTo:
        - REFID: AVAILABILITY
      group: Business specific

    - ID: NON_REPUDIATION
      title: Auditability and Non repudiation of resource access
      description: |
        Ability to have available evidence of the users and actor mains actions, including:
          - Trackign of CLIENT access to RESOURCE_OWNER's assets and data 
      contributesTo:
        # - REFID: INTEGRITY
        - REFID: COMPLIANCE
      group: Business specific

    - ID: CLIENT_ACCESS_LIMITATION
      title: Limits CLIENT access to RESOURCE_OWNER's assets and data
      description: |
        Limits CLIENT access to RESOURCE_OWNER's assets and data . This includes:

          - Revoke access to CLIENT over time
          - Limit the set of resources accessed by CLIENT (authorization)
      contributesTo:
        - REFID: FULL_CIA
        - REFID: COMPLIANCE
      group: Business specific

    - ID: CLIENT_REVOKE_ACCESS
      title: Revoke CLIENT access to RESOURCE_OWNER's assets and data
      description: |
        Revoke access to CLIENT over time
      contributesTo:
        - REFID: CLIENT_ACCESS_LIMITATION
      group: Business specific

    - ID: CLIENT_LIMIT_ACCESS
      title: Limits CLIENT access to some RESOURCE_OWNER's assets and data
      description: |
        Limit the set of resources accessed by CLIENT (authorization)
      contributesTo:
        - REFID: CLIENT_ACCESS_LIMITATION
      group: Business specific

    - ID: NOT_SHARING_OWNER_CREDENTIAL
      title: Not sharing RESOURCE_OWNER credentials
      description: |
        Not sharing RESOURCE_OWNER credential with third parties
      contributesTo:
        - REFID: CLIENT_ACCESS_LIMITATION
      group: Advanced security features

    - ID: USER_AGENT_RESILIENCY
      title: Compromised USER_AGENT resiliency
      description: |
        Resiliency for RESOURCE_OWNER's USER_AGENT against attacks like XSS
      contributesTo:
        - REFID: CLIENT_ACCESS_LIMITATION
      group: Advanced security features

    - ID: CLIENT_RESILIENCY
      title: Compromised CLIENT resiliency
      description: |
        Resiliency for RESOURCE_OWNER's RESOURCES against compromised CLIENT
      contributesTo:
        - REFID: CLIENT_ACCESS_LIMITATION
      group: Advanced security features



  diagram:

  assets:

    - ID: CLIENT
      type: system
      title: Client
      description: |
        An application requesting access from the RESOURCE_OWNER (TODO: refine this description)
      inScope: true

    # - ID: AUTH_SERVER_TOKEN_ENDPOINT
    #   type: endpoint
    #   title: Authorization server token endpoint
    #   description: |
    #     Authorization server's endpoint for DF_AUTH_GRANT_AS and DF_ACCESS_TOKEN_CL
    #   inScope: true


    # - ID: AUTH_SERVER_AUTH_ENDPOINT
    #   type: endpoint
    #   title: Authorization endpoint for resource owner
    #   description: |
    #     Authorization server's endpoint for DF_AUTH_REDIRECT
    #   inScope: true
    - ID: CONFIDENTIAL_CLIENT
      title: Confidential Client
      description: |
        Clients capable of maintaining the confidentiality of their
        credentials (e.g., client implemented on a secure server with
        restricted access to the client credentials), or capable of secure
        client authentication using other means.
      specifies: CLIENT
      type: system
      inScope: true

    - ID: PUBLIC_CLIENT
      title: Confidential Client
      description: |
        Clients incapable of maintaining the confidentiality of their
        credentials (e.g., clients executing on the device used by the
        resource owner, such as an installed native application or a web
        browser-based application), and incapable of secure client
        authentication via any other means.
      specifies: CLIENT
      type: system
      inScope: true

    - ID: AUTHORIZATION_GRANT
      title: Authorization Grant
      description: |
        An authorization grant is a credential representing the resource
        owner's authorization (to access its protected resources) used by the
        client to obtain an access token.  This specification defines four
        grant types -- authorization code, implicit, resource owner password
        credentials, and client credentials -- as well as an extensibility
        mechanism for defining additional types.
      type: credential
      inScope: true

    - ID: ACCESS_TOKEN
      type: credential
      title: Access Token
      description: |
        Access tokens are credentials used to access protected resources.  An
        access token is a string representing an authorization issued to the
        client.  The string is usually opaque to the client.  Tokens
        represent specific scopes and durations of access, granted by the
        resource owner, and enforced by the resource server and authorization
        server.

        The token may denote an identifier used to retrieve the authorization
        information or may self-contain the authorization information in a
        verifiable manner (i.e., a token string consisting of some data and a
        signature).  Additional authentication credentials, which are beyond
        the scope of this specification, may be required in order for the
        client to use a token.

        The access token provides an abstraction layer, replacing different
        authorization constructs (e.g., username and password) with a single
        token understood by the resource server.  This abstraction enables
        issuing access tokens more restrictive than the authorization grant
        used to obtain them, as well as removing the resource server's need
        to understand a wide range of authentication methods.

        Access tokens can have different formats, structures, and methods of
        utilization (e.g., cryptographic properties) based on the resource
        server security requirements.  Access token attributes and the
        methods used to access protected resources are beyond the scope of
        this specification and are defined by companion specifications such
        as [RFC6750].
      inScope: true

    # - ID: CLIENT_CREDENTIALS
    #   type: system
    #   title: Client credentials
    #   description: |
    #   inScope: true


    - ID: CLIENT_SECRETS
      type: credential
      title: Client secret for authentication with AUTH_SERVER
      description: |
        Secrets held by CLIENT to authentication to the Authorization Server
      inScope: true

    - ID: AUTH_SERVER
      type: system
      title: Authorization server
      description: |
        The server issuing access tokens to the client after successfully
        authenticating the resource owner and obtaining authorization.
      inScope: true

    - ID: DF_AUTH_REDIRECT
      type: dataflow
      title: Auth User Agent Redirection
      description: User Agent Redirection for Client authorization request. this is
        part of DF_AUTH_REQUEST
      inScope: true

    - ID: DF_ACCESS_TOKEN_CL
      type: dataflow
      title: Auth server sending the access token to the client
      description: Auth server sending the access token to the client after resource
        owner approval
      inScope: true

    - ID: DF_AUTH_GRANT_AS
      type: dataflow
      title: Client requesting Authorization Server for the Access Token
      description: Client requesting Authorization Server for the Access Token after
        resource owner approval
      inScope: true

    - ID: CONFIDENTIAL_CLIENT
      type: system
      title: Public Client
      description: |
        Clients capable of maintaining the confidentiality of their
        credentials (e.g., client implemented on a secure server with
        restricted access to the client credentials), or capable of secure
        client authentication using other means.
        For example a web application. A web application is a confidential client running on a web
        server.  Resource owners access the client via an HTML user
        interface rendered in a user-agent on the device used by the
        resource owner.  The client credentials as well as any access
        token issued to the client are stored on the web server and are
        not exposed to or accessible by the resource owner.
      inScope: true

    - ID: PUBLIC_CLIENT
      type: system
      title: Public Client
      description: |
        Clients incapable of maintaining the confidentiality of their
        credentials (e.g., clients executing on the device used by the
        resource owner, such as an installed native application or a web
        browser-based application), and incapable of secure client
        authentication via any other means.
        For example a user-agent-based application or a native applications.
      inScope: true

    - ID: CLIENT_ID
      type: data
      title: Client Identifier
      description: |
        The authorization server issues the registered client a client
        identifier -- a unique string representing the registration
        information provided by the client.  The client identifier is not a
        secret; it is exposed to the resource owner and MUST NOT be used
        alone for client authentication.  The client identifier is unique to
        the authorization server.

        The client identifier string size is left undefined by this
        specification.  The client should avoid making assumptions about the
        identifier size.  The authorization server SHOULD document the size
        of any identifier it issues.
      inScope: true


  assumptions:
    - ID: ATT1
      description: |
        the attacker has full access to the network between the client and
        authorization servers and the client and the resource server,
        respectively.  The attacker may eavesdrop on any communications
    - ID: ATT2
      description: |
        an attacker has unlimited resources to mount an attack.
    - ID: ATT3
      description: |
        two of the three parties involved in the OAuth protocol may
        collude to mount an attack against the 3rd party.  For example,
        the client and authorization server may be under control of an
        attacker and collude to trick a user to gain access to resources.

    - ID: ARC1
      description: |
        The OAuth protocol leaves deployments with a certain degree of
        freedom regarding how to implement and apply the standard.  The core
        specification defines the core concepts of an authorization server
        and a resource server.  Both servers can be implemented in the same
        server entity, or they may also be different entities.  The latter is
        typically the case for multi-service providers with a single
        authentication and authorization system and is more typical in
        middleware architectures.

    - ID: ARC2
      description: |
        The following data elements are stored or accessible on the
         authorization server:

         o  usernames and passwords

         o  client ids and secrets

         o  client-specific refresh tokens

         o  client-specific access tokens (in the case of handle-based design;
             see Section 3.1)

         o  HTTPS certificate/key

         o  per-authorization process (in the case of handle-based design;
             Section 3.1): "redirect_uri", "client_id", authorization "code"

    - ID: ARC3
      description: |
        The following data elements are stored or accessible on the resource
        server:

        o  user data (out of scope)

        o  HTTPS certificate/key

        o  either authorization server credentials (handle-based design; see
            Section 3.1) or authorization server shared secret/public key
            (assertion-based design; see Section 3.1)

        o  access tokens (per request)

        It is assumed that a resource server has no knowledge of refresh
        tokens, user passwords, or client secrets.
    - ID: ARC4
      description: |
        In OAuth, a client is an application making protected resource
        requests on behalf of the resource owner and with its authorization.
        There are different types of clients with different implementation
        and security characteristics, such as web, user-agent-based, and
        native applications.  A full definition of the different client types
        and profiles is given in [RFC6749], Section 2.1.

        The following data elements are stored or accessible on the client:

        o  client id (and client secret or corresponding client credential)

        o  one or more refresh tokens (persistent) and access tokens
            (transient) per end user or other security-context or delegation
            context

        o  trusted certification authority (CA) certificates (HTTPS)

        o  per-authorization process: "redirect_uri", authorization "code"


  attackers:
    - ID: ANONYMOUS
      description: |
        Anonymous internet user
      inScope: true

    - ID: RESOURCE_OWNER
      description: |
        An entity capable of granting access to a protected resource.
        When the resource owner is a person, it is referred to as an
        end-user.
      inScope: true

    - ID: RESOURCE_SERVER
      description: |
        The server hosting the protected resources, capable of accepting
        and responding to protected resource requests using access tokens.
      inScope: true

    - ID: CLIENT_OPERATOR
      description: |
        The operators of the CLIENT.
      # An application making protected resource requests on behalf of the
      # resource owner and with its authorization.  The term "client" does
      # not imply any particular implementation characteristics (e.g.,
      # whether the application executes on a server, a desktop, or other
      # devices).
      inScope: true

    - ID: AUTHORIZATION_SERVER_OPERATOR
      description: |
        The operators in the Authorization Server.
      # The server issuing access tokens to the client after successfully
      # authenticating the resource owner and obtaining authorization.
      inScope: true




analysis:

 
threats:
