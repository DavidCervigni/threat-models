#based on: https://datatracker.ietf.org/doc/html/rfc6819

ID: AuthorizationServer
title: Authorization Server
parent: OAuth2.0
scope:
  description:
  diagram:

  assets:
    - ID: AUTH_SERVER_TOKEN_ENDPOINT
      type: endpoint
      title: Authorization server token endpoint
      description: |
        Authorization server's endpoint for DF_AUTH_GRANT_AS and DF_ACCESS_TOKEN_CL
      inScope: true


    - ID: AUTH_SERVER_AUTH_ENDPOINT
      type: endpoint
      title: Authorization endpoint for resource owner
      description: |
        Authorization server's endpoint for DF_AUTH_REDIRECT
      inScope: true


  assumptions:
    - ID:
      description: |
        A Auth server may host several ...

  attackers:
    - ID: ANONYMOUS
      description: |
        Anonymous internet user
      inScope: true

    - ID: CLIENT
      description: |
        Client app
      inScope: true

analysis:

 
threats:
  - ID: AuthServerPhishing1
    title: Password Phishing by Counterfeit Authorization Server
    impact: Steal users' passwords
    impacts:
      - REFID: CONFIDENTIALITY
    assets:
      # - ID: 
    CVSS:
      vector: CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      A hostile party could take advantage of this
      by intercepting the client's requests and returning misleading or
      otherwise incorrect responses.  This could be achieved using DNS or
      Address Resolution Protocol (ARP) spoofing.  Wide deployment of OAuth
      and similar protocols may cause users to become inured to the
      practice of being redirected to web sites where they are asked to
      enter their passwords.  If users are not careful to verify the
      authenticity of these web sites before entering their credentials, it
      will be possible for attackers to exploit this practice to steal
      users' passwords.
    pentestTestable: true
    public: true
    fullyMitigated: false
    countermeasures:
      - ID: 5.1.2_AUTH_SERVER_AUTHENTICATION
        title: TLS for the authorization server
        description: |
          Authorization servers should consider such attacks when developing
          services based on OAuth and should require the use of transport-
          layer security for any requests where the authenticity of the
          authorization server or of request responses is an issue (see
          Section 5.1.2).

          HTTPS server authentication or similar means can be used to
          authenticate the identity of a server. The goal is to reliably bind
          the fully qualified domain name of the server to the public key
          presented by the server during connection establishment (see
          [RFC2818]).
          The client should validate the binding of the server to its domain
          name. If the server fails to prove that binding, the communication
          is considered a man-in-the-middle attack. This security measure
          depends on the certification authorities the client trusts for that
          purpose. Clients should carefully select those trusted CAs and
          protect the storage for trusted CA certificates from modifications.
          This is a countermeasure against the following threats:
          o Spoofing
          o Proxying
          o Phishing by counterfeit servers


        operational: true
        inPlace: no
        public: true
        operator: AUTHORIZATION_SERVER


      - ID: USER_PHISHING_AWARENESS
        title: Users educated to avoid phishing attacks
        description: |
          Authorization servers should attempt to educate users about the
          risks posed by phishing attacks and should provide mechanisms that
          make it easy for users to confirm the authenticity of their sites.
          Section 5.1.2).
        operational: true
        inPlace: no
        public: true
        operator: AUTHORIZATION_SERVER


  - ID: TOO_MUCH_GRANT
    title: User Unintentionally Grants Too Much Access Scope
    impact: Disclosure of  RESOURCE_OWNER's RESOURCES
    impacts:
      - REFID: CONFIDENTIALITY
    assets:
      # - ID: 
    CVSS:
      vector: CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      When obtaining end-user authorization, the end user may not
      understand the scope of the access being granted and to whom, or they
      may end up providing a client with access to resources that should
      not be permitted.
    pentestTestable: true
    public: true
    fullyMitigated: false
    countermeasures:
      - ID: AUTH_SERVER_RE_CHECK_GRANTS
        title: AUTHORIZATION_SERVER policy discretional decision
        description: |
          Narrow the scope, based on the client.  When obtaining end-user
          authorization and where the client requests scope, the
          authorization server may want to consider whether to honor that
          scope based on the client identifier.  That decision is between
          the client and authorization server and is outside the scope of
          this spec.  The authorization server may also want to consider
          what scope to grant based on the client type, e.g., providing
          lower scope to public clients (Section 5.1.5.1).
        operational: true
        inPlace: no
        public: true
        operator: AUTHORIZATION_SERVER

      - ID: USER_AUTH_AWARENESS
        title: Users educated to avoid phishing attacks
        description: |
          Authorization servers should attempt to educate users about the
          risks posed by phishing attacks and should provide mechanisms that
          make it easy for users to confirm the authenticity of their sites.
          Section 5.1.2).
        operator: AUTHORIZATION_SERVER
        operational: true
        inPlace: no
        public: true


  - ID: OPEN_REDIRECTOR
    title: Authorization server open redirect
    impact: Phishing attacks can be executed exploiting AUTH_SERVER open redirect
    # impacts:
    #   - REFID: NON_REPUDIATION
    assets:
      - REFID: DF_AUTH_REDIRECT
      - REFID: AUTH_SERVER
      - REFID: AUTH_SERVER_AUTH_ENDPOINT
    CVSS:
      vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:N
    threatType: Spoofing, Information Disclosure
    attack: |
      An attacker could use the end-user authorization endpoint and the
      redirect URI parameter to abuse the authorization server as an open
      redirector. An open redirector is an endpoint using a parameter to
      automatically redirect a user agent to the location specified by the
      parameter value without any validation.
    pentestTestable: true
    public: true
    fullyMitigated: false

    countermeasures:
      - ID: PRE-REGISTERED_REDIRECT_URI
        title: Pre-registered redirect URI
        description: |
          Require clients to register any full redirect URIs (Section 5.2.3.5).
          Don’t redirect to a redirect URI if the client identifier or
          redirect URI can’t be verified (Section 5.2.3.5).
          Authorization servers should not automatically process repeat
          authorizations to public clients unless the client is validated
          using a pre-registered redirect URI (Section 5.2.3.5).
        operational: false
        inPlace: true
        public: true



  - ID: PUBLIC_CLIENT_SPOOFING1
    title: Malicious Client Obtains Existing Authorization by Fraud
    impact: Disclosure of RESOURCE_OWNER's RESOURCES
    impacts:
      - REFID: CONFIDENTIALITY
    assets:
      - REFID: DF_AUTH_REDIRECT
      - REFID: AUTH_SERVER_AUTH_ENDPOINT
      - REFID: PUBLIC_CLIENT
    CVSS:
      vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      Authorization servers may wish to automatically process authorization
      requests from clients that have been previously authorized by the
      user. When the user is redirected to the authorization server's end-
      user authorization endpoint to grant access, the authorization server
      detects that the user has already granted access to that particular
      client. Instead of prompting the user for approval, the
      authorization server automatically redirects the user back to the
      client.

      A malicious client may exploit that feature and try to obtain such an
      authorization "code" instead of the legitimate client.
    pentestTestable: true
    public: true
    fullyMitigated: false

    countermeasures:
      - REFID: PRE-REGISTERED_REDIRECT_URI


      - ID: REDUCED_ACCESS_TOKEN_SCOPE
        title: Limiting the scope of access tokens obtained through automated approvals
        description: |
          Authorization servers can mitigate the risks associated with
          automatic processing by limiting the scope of access tokens
          obtained through automated approvals (Section 5.1.5.1).
        operator: AUTHORIZATION_SERVER
        operational: true
        inPlace: false
        public: true



  - ID: 4.3.1_EAVESDROPPING_ACCESS_TOKENS1
    title: Eavesdropping Access Tokens
    impact: |
      The attacker is able to access all resources with the
      permissions covered by the scope of the particular access token.
    impacts:
      - REFID: CONFIDENTIALITY
      - REFID: INTEGRITY
    assets:
      - REFID: DF_ACCESS_TOKEN_CL
      - REFID: DF_AUTH_GRANT_AS
      - REFID: AUTH_SERVER_TOKEN_ENDPOINT
    CVSS:
      vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      Attackers may attempt to eavesdrop access tokens in transit from the
      authorization server to the client.
    pentestTestable: true
    public: true
    fullyMitigated: true

    countermeasures:
      - ID: CLIENT_AUTH_SERVER_TLS
        title: Secure transport layer to CLient to AUTH_SERVER by TLS
        description: |
          As per the core OAuth spec, the authorization servers must ensure
          that these transmissions are protected using transport-layer
          mechanisms such as TLS (see Section 5.1.1).
        operator: AUTHORIZATION_SERVER
        operational: true
        inPlace: false
        public: true

      - REFID: REDUCED_ACCESS_TOKEN_SCOPE


  - ID: 4.3.2_AS_DB_TOKEN_DISCLOSURE
    title: Obtaining Access Tokens from Authorization Server Database
    impact: |
      The attacker is able to access all resources for all tokens in Auth Server.
    impacts:
      - REFID: CONFIDENTIALITY
      - REFID: INTEGRITY
    assets:
      - REFID: ACCESS_TOKEN
      - REFID: AUTH_SERVER
    CVSS:
      vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      An attacker may obtain access
      tokens from the authorization server’s database by gaining access to
      the database or launching a SQL injection attack. 

      This threat is applicable if the authorization server stores access
      tokens as handles in a database.
    pentestTestable: true
    public: true
    fullyMitigated: true

    countermeasures:
      - ID: 5.1.4.1.3_HASHED_TOKEN_DB
        title: Store access token hashes only (Section 5.1.4.1.3).
        description: |
          Store access token hashes only (Section 5.1.4.1.3).
        operational: false
        inPlace: true
        public: true

      - ID: 5.1.4.1.1_SYS_SEC
        title: Enforce Standard System Security Means
        description: |
          A server system may be locked down so that no attacker may get access
          to sensitive configuration files and databases.
        operational: true
        operator: AUTHORIZATION_SERVER_OPERATOR
        inPlace: false
        public: true

      - ID: 5.1.4.1.2_SQL_SEC
        title: Enforce Standard SQL Injection Countermeasures
        description: |
          If a client identifier or other authentication component is queried
          or compared against a SQL database, it may become possible for an
          injection attack to occur if parameters received are not validated
          before submission to the database.
          o Ensure that server code is using the minimum database privileges
          possible to reduce the "surface" of possible attacks.
          o Avoid dynamic SQL using concatenated input. If possible, use
          static SQL.
          o When using dynamic SQL, parameterize queries using bind arguments.
          Bind arguments eliminate the possibility of SQL injections.
          o Filter and sanitize the input. For example, if an identifier has
          a known format, ensure that the supplied value matches the
          identifier syntax rules.
        operational: false
        inPlace: false
        public: true


  - ID: 4.3.3_CLIENT_CREDENTIALS_DISCLOSURE
    title: Disclosure of Client Credentials during Transmission
    impact: |
      Revelation of a client credential enabling phishing or impersonation of a client service.
    impacts:
      - REFID: CONFIDENTIALITY
      - REFID: INTEGRITY
    assets:
      - REFID: DF_AUTH_GRANT_AS
    CVSS:
      vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      An attacker could attempt to eavesdrop the transmission of client
      credentials between the client and server during the client
      authentication process or during OAuth token requests.
    pentestTestable: true
    public: true
    fullyMitigated: true

    countermeasures:
      - ID: 5.1.1_CONFIDENTIAL_REQUESTS
        title: Ensure Confidentiality of Requests (TLS)
        description: |
          This is applicable to all requests sent from the client to the
          authorization server or resource server. While OAuth provides a
          mechanism for verifying the integrity of requests, it provides no
          guarantee of request confidentiality. Unless further precautions are
          taken, eavesdroppers will have full access to request content and may
          be able to mount interception or replay attacks by using the contents
          of requests, e.g., secrets or tokens.
          Attacks can be mitigated by using transport-layer mechanisms such as
          TLS [RFC5246]. A virtual private network (VPN), e.g., based on IPsec
          VPNs [RFC4301], may be considered as well.
          Note: This document assumes end-to-end TLS protected connections
          between the respective protocol entities. Deployments deviating from
          this assumption by offloading TLS in between (e.g., on the data
          center edge) must refine this threat model in order to account for
          the additional (mainly insider) threat this may cause.
          This is a countermeasure against the following threats:
          o Replay of access tokens obtained on the token’s endpoint or the
          resource server’s endpoint
          o Replay of refresh tokens obtained on the token’s endpoint
          Replay of authorization "codes" obtained on the token’s endpoint
          (redirect?)
          o Replay of user passwords and client secrets
        operational: true
        operator: CLIENT_OPERATOR
        inPlace: true
        public: true

      - ID: CONFIDENTIAL_CREDENTIALS_REQUESTS
        title: Do not send plaintext credentials
        description: |
          Use alternative authentication means that do not require the
          sending of plaintext credentials over the wire (e.g., Hash-based
          Message Authentication Code).
        operational: false
        inPlace: false
        public: true


  - ID: 4.3.4_CLIENT_CREDENTIALS_DISCLOSURE
    title: Obtaining Client Secret from Authorization Server Database
    impact: |
      Disclosure of all "client_id"/secret combinations. This
      allows the attacker to act on behalf of legitimate clients.
    impacts:
      - REFID: CONFIDENTIALITY
      - REFID: INTEGRITY
    assets:
      - REFID: CLIENT_SECRETS
    CVSS:
      vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      An attacker may obtain valid "client_id"/secret combinations from the
      authorization server’s database by gaining access to the database or
      launching a SQL injection attack.
    pentestTestable: true
    public: true
    fullyMitigated: true
    countermeasures:
      - REFID: 5.1.4.1.2_SQL_SEC
      - REFID: 5.1.4.1.1_SYS_SEC
      - ID: 5.1.4.1_CRED_PROTECTION
        title: Enforce Credential Storage Protection Best Practices
        description: |
          Administrators should undertake industry best practices to protect
          the storage of credentials (for example, see [OWASP]). Such
          practices may include but are not limited to the following
          sub-sections.
        operational: true
        operator: AUTHORIZATION_SERVER_OPERATOR
        inPlace: false
        public: true

  - ID: 4.3.5_CLIENT_SECRET_BRUTE_FORCE
    title: Obtaining Client Secret by Online Guessing
    impact: |
      Disclosure of a single "client_id"/secret pair.
    impacts:
      - REFID: CONFIDENTIALITY
      - REFID: INTEGRITY
    assets:
      - REFID: CLIENT_SECRETS
    attackers:
      - REFID: ANONYMOUS
    CVSS:
      vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:L
    threatType: Spoofing, Elevation of privileges, Information Disclosure
    attack: |
      An attacker may try to guess valid "client_id"/secret pairs.
    pentestTestable: true
    public: true
    fullyMitigated: true
    countermeasures:
      - ID: 5.1.4.2.2_HIGH_ENTROPY_SECRETS
        title: Use High Entropy for Secrets
        description: |
          When creating secrets not intended for usage by human users (e.g.,
          client secrets or token handles), the authorization server should
          include a reasonable level of entropy in order to mitigate the risk
          of guessing attacks. The token value should be >=128 bits long and
          constructed from a cryptographically strong random or pseudo-random
          number sequence (see [RFC4086] for best current practice) generated
          by the authorization server.
        operational: false
        inPlace: false
        public: true

      - ID: 5.1.4.2.3_LOCK_ACCOUNTS
        title: Lock Accounts
        description: |
          Online attacks on passwords can be mitigated by locking the
          respective accounts after a certain number of failed attempts.
          Note: This measure can be abused to lock down legitimate service users.
        operational: false
        inPlace: false
        public: true

      - ID: 5.2.3.7_STRONG_CLIENT_AUTHENTICATION
        title: Use strong client authentication
        description: |
          By using an alternative form of authentication such as client
          assertion [OAuth-ASSERTIONS], the need to distribute a
          "client_secret" is eliminated. This may require the use of a secure
          private key store or other supplemental authentication system as
          specified by the client assertion issuer in its authentication
          process. (e.g., client_assertion/client_token)
        operational: false
        inPlace: false
        public: true
