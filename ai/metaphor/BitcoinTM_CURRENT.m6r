Role: AppSec
    You are an applicatino security expert in Secure development lifecycle.

Context: threat modeling and its terminilogy
    Threat models reasoning answer 4 main questions:
    - What is being building? It defines the scope
    - What can go wrong? it defines the threats aka attacks etc.
    - What is being doing about it? defines the mitigations aka countermeaures aka controls
    - Are we doing a good job?

    Terminology:
    Focusing on the semantics
    One way to overcome "the terminology catastrophe" is to ignore it mostly while focusing on few 
    cardinal concepts, like answering the fundamental 4 questions we are striving for. 
    Wether we call something 'risk', 'bug', 'vulnerability', 'threat', 'attack' we consider all
     those terms (and subjectively associated meanings) in the realm of "Something that can go wrong".
      Wether we call something 'countermeasure', 'mitigation', 'control' we consider the fact that that 
      is in the realm on "something we do about something that can go wrong". In the next chapter we'll 
      balance the need to have formal definition with that of having effective communication structuring 
      our threat model data and facts using few high level concepts.

    Context: threat model tool
        This tool is used to:
            - Structure the data (roles/attackers, security objectives, asset in scope, threat, countermeasures/mitigations)
            - It uses templates to generate reports from the data.
            - It assists in exploiting SDL (secure development lifecycle) synergies (operational hardening guidelines, testing checklist, extract crypto key catalog)
            - It assist in the process of RFI (request for information ti engineering teams)
            - Export ticket list for tracking tools (e.g. Jira)


    Context: Threat Model high level data structure

        What are we building? defines -> assets and, actors aka roles aka attackers

        What can go wrong? -> defines threat, attack, impact

        What are we doing about it? defines -> mitigations aka controls aka countermeasures

        In the reporting tool we use those high level concepts to structure the data 
        and generate highly consistent reports. This consistency of few high level concept 
        is not used only to generate those reports but also to leverage synergies in different phases 
        of the secure development lifecycle; for example a specific 
        'Dynamic test/DAST' may be associated with a countermeasure or a threat.
            
        YAML high elvel structures

            - Scope assets
            - Attackers (and roles en general)
            - Security objective
            - Threat and their countermeasures
        The minimal data structure we want to define is a set of threat and their mitigation; this answers
        the question: what can go wrong? and what we do about it?
        the `ID:` of the threat should sound (recall) something that can go wrong; for example: 
        - ID: REQUEST_REPUDIATION 
        - ID: SQL_INJECTION1
        - ID: BACKEND_SERVICE_SPOOFING
        
        There is no 'description' for threat rather a semantic couple that represents the 'description'
        'attack:' and 'impactDesc:' fields. Attack describes hot to exploit and impactDesc describe the impact of the realization of the potential threat.
        'impactedSecObj' may replace impactDesc that is optional; both impactedSecObj and impactDesc may be present if
        impactDesc give useful information on top of impactedSecObj.

        
    Context: Threat model Tool
        This threat model tool assist in structuring the treat model stricture into yaml to then create reports and query threat model data.
    Context: Exmple yaml Files
        Embed: threatModels/**/*.yaml
    Context: security Objectives
        The list of security objectives defines a high level security properties that the design, in any form should achieve. 
        Taxonomies like CIA (confidentiality integrity availability) are also necessary as common
        threat impacts those security objectives as necessary. This is used also to compose attack trees in the report.
    Context: assets
        This is a decompositino of what is being built. Threats refers alfo to assets (REFID: ASSET_ID) 
        Assets are also dataflow (e.g. connections), this is to do dataflow analysis and are also referred in the threat model.
    Context: attackers
        This section contain the list of plausible attacekr and threat agents, some can be also out of scope explicitly (for example system administrator
        of a software system)
    Context: threat model scope definition
        "What are we building?" and define what is is scope in a way that it will mainly facilitate the analysis of the threat. It will facilitate the analysis by allowing to only focus on what it is really in scope by reducing it. If we fail to reduce the scope to the essential, then the number of things that can go wrong grows exponentially and the effort becomes overwhelming and difficult to estimate and to measure progress. Rigorously defining the scope and classifying the various part of the system (we tend to call it 'assets' here) also allows to improve the system documentation by avoid ambiguity in names and having an holistic view of the system across dev teams etc.

        At an high level we know what is the broader scope, the 'title' of the whole threat model. IT will be something like "Threat model of system X" or "Threat Model of product Y". That is still a vague definition of its scope and is not allowing us to reduce it to the essential as many points are still undefined and many questions unanswered:

        The System X runs on a could infrastructure, is it the infrastructure (network, firewalls, load balancers etc) in scope ?
        Is the build pipeline from the source code repositories to the product release artifact repository in scope?
        Are the used imported libraries and artifact in scope?
        Are the possible weaknesses of this used cryptographic algorithm or the menace from future quantum computer braking it in scope?
        Most times the answer to those questions depend on the context in a of case by case scenario. And often people would not agree even inside the same organisation to what the answer should be. Let's try to adopt another more rigorous approach. We need to first of all define what are we building... So we reformulate the questions "are are we building ... ?

        [...] is it the infrastructure (network, firewalls, load balancers etc) in scope ?

        becomes

        [...] Are we building the infrastructure (network, firewalls, load balancers etc)?

        it may be the case that the developers are in fact delivering some form of infrastructure as part of the product itself (Kubernetes configurations, HELM charts, docker compose files, Terraform script and other IAC artifacts). in this case all of what is built is clearly in scope! On the other hand something that is not build but just "used" by the system, for example a mutual TLS connection (mTLS) may well be listed as a countermeasure of a specific identified threat not as an asset in scope an analysis.

        The same for the question "Is the build pipeline [...] in scope?" becomes "Are we building the build pipeline?" it will probably be in scope, specially if there's a DevOps teams building it, it will be what that teams build to be a specific part of the threat model.

        "Are the used imported libraries and artifact in scope?" ... almost by definition an imported library is not a created library. So the modified question "Are the building imported libraries and artifact in scope?" is a likely No. Nevertheless the dev team build the imports, chooses the library and the used version. For example if the software uses an Object Relationship Mapping (ORM) library like Hibernate, it may well be a countermeasure for some kind of SQL Injection but the library in itself will not be threat modeled. The fact that that version may have disclosed vulnerabilities (CVEs) that it is actively well maintained and used in a proper way is it indeed in scope. In fact the dev teams build an import of the libraries in the project configuration files and build the use of the library in the source code itself.

        And we need also to remember that threat modeling is not the beginning and the end of software security ... and not even of software security design. We are not going to capture all and every possible risk related to the final system, even trying to do so will become an infinite exercise. Our aim is to identify what can go wrong in what we build. The more we can focus our analysis (aka reduce the scope to the essence, to what we build) the best we are going to contribute to the security from the threat modeling practice.

        Defining a scope (or sub-scope) that exactly matches one dev team's work also makes the process more streamlined and actionable. Reviewing the findings, for example the missing countermeasures, can be done within a single's team responsibility, tools and processes.

    Context: yaml threats section
        This sectino contains indications about the threat in yaml (-ID:...)
        countermeasures: should be the last attribtue on the list (not fullyMitigated: or others)
        Use this order for attributes:
        In this version, the attributes are reordered as follows:
        - ID
        - title
        - attack
        - threatType
        - impactDesc
        - impactedSecObj
        - attackers
        - CVSS
        - fullyMitigated 
        - countermeasures (last one)
        it is important that countermeasures is the last, specially when asked to reorder attributes
        Do not get too repetitive with the IDs of the threats, like addind "ENHANCED" everywhere
    Context: CVSS section
        Here is an example of a threat CVSS section. Create the vector as in this example:
         ```yaml
            CVSS:
                  vector: CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N
            ```
         do not use "base:" attribute
    Context: Attacker
        YAML Referecnes to attackers needs the attacker itself to be previously defined e.g.- REFID: ECONOMIC_ACTORS needs a previous 
        definition is scope!
    Context: We are working on refining a Bitcoin threat model now! Following is the yaml threat model we are wokring on
        Embed: threatModels/Bitcoin/Bitcoin.yaml
        Context: insufficient fee market
            Also consider the problem that happens when there will be no block rewards, create threats and mitigatinos about it too
 
Action: 
    Show me a detailed yaml threat about what happens after all coins have been mined and the incentives for the 
    miners are not there.

