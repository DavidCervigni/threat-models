 

@startuml
digraph G {
rankdir="BT";
  node [shape=plaintext, fontname="Arial" fontsize="12"];
    "4_4_1_7_CLIENT_SPOOFING4" [ fillcolor="#F8CECC", style=filled, shape=polygon, color="#B85450"
    label= 
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="center"><b>Threat</b><br/> 

Authorization code Leakage through Counterfeit Client
</td></tr>
     <tr><td><table border="0" cellborder="0" cellspacing="8"><tr>
                ret += secObj.linkedImpactMDText()
     <td align="center" href="#OAuth2.CONFIDENTIALITY" bgcolor="#EEEEEE"><font color="blue">CONFIDENTIALITY</font></td>
                ret += secObj.linkedImpactMDText()
     <td align="center" href="#OAuth2.INTEGRITY" bgcolor="#EEEEEE"><font color="blue">INTEGRITY</font></td>
                ret += secObj.linkedImpactMDText()
     <td align="center" href="#OAuth2.NON_REPUDIATION" bgcolor="#EEEEEE"><font color="blue">NON_REPUDIATION</font></td>
     </tr></table></td></tr>   
   </table>>
   ];
    
"4_4_1_7_CLIENT_SPOOFING4_attack" [ fillcolor="#f5f5f5", style=filled, shape=polygon, color="#666666", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="center"><b>Attack</b><br/>

The attacker leverages the authorization &quot;code&quot; grant type in an<br/>attempt to get another user (victim) to log in, authorize access to his/her<br/>resources, and subsequently obtain the authorization &quot;code&quot; and inject<br/>it into a client application using the attackerâ€™s account. The goal is to<br/>associate an access au[...]
</td></tr>
   </table>>
    ]

"4_4_1_7_CLIENT_SPOOFING4_attack" -> "4_4_1_7_CLIENT_SPOOFING4"  [label = " exploits"]

    "4_4_1_7_CLIENT_SPOOFING4_countermeasure0" [ 
       fillcolor="#FFF2CC", style=filled, shape=polygon, color="#D6B656", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Binding of Authorization &quot;code&quot; to &quot;redirect_uri&quot;
</td></tr>
   </table>>
   ]

     "4_4_1_7_CLIENT_SPOOFING4_countermeasure0" -> "4_4_1_7_CLIENT_SPOOFING4_attack" [label = " mitigates"]

    "4_4_1_7_CLIENT_SPOOFING4_countermeasure1" [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Issue Installation-Specific Client Secrets
</td></tr>
   </table>>
   ]

     "4_4_1_7_CLIENT_SPOOFING4_countermeasure1" -> "4_4_1_7_CLIENT_SPOOFING4_attack" [label = " mitigates"]

    "4_4_1_7_CLIENT_SPOOFING4_countermeasure2" [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Binding of Authorization &quot;code&quot; to &quot;client_id&quot;
</td></tr>
   </table>>
   ]

     "4_4_1_7_CLIENT_SPOOFING4_countermeasure2" -> "4_4_1_7_CLIENT_SPOOFING4_attack" [label = " mitigates"]

    "4_4_1_7_CLIENT_SPOOFING4_countermeasure3" [ 
       fillcolor="#FFF2CC", style=filled, shape=polygon, color="#D6B656", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Implicit grant flow
</td></tr>
   </table>>
   ]

     "4_4_1_7_CLIENT_SPOOFING4_countermeasure3" -> "4_4_1_7_CLIENT_SPOOFING4_attack" [label = " mitigates"]

}
@enduml

