 

@startuml
digraph G {
rankdir="BT";
  node [shape=plaintext, fontname="Arial" fontsize="12"];
    Client_Secrets_disclosure [ fillcolor="#F8CECC", style=filled, shape=polygon, color="#B85450"
    label= 
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="center"><b>Threat</b><br/> 

Spoofing, Elevation of privileges, Information Disclosure
</td></tr>
     <tr><td><table border="0" cellborder="0" cellspacing="8"><tr>
                ret += secObj.linkedImpactMDText()
     <td align="center" href="#OAuth2.0.CONFIDENTIALITY" bgcolor="#EEEEEE"><font color="blue">CONFIDENTIALITY</font></td>
                ret += secObj.linkedImpactMDText()
     <td align="center" href="#OAuth2.0.INTEGRITY" bgcolor="#EEEEEE"><font color="blue">INTEGRITY</font></td>
     </tr></table></td></tr>   
   </table>>
   ];
    
Client_Secrets_disclosure_attack [ fillcolor="#f5f5f5", style=filled, shape=polygon, color="#666666", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="center"><b>Attack</b><br/>

Obtain Secret From Source Code or Binary: This applies for all client types.<br/>For open source projects, secrets can be extracted directly from source code in<br/>their public repositories.  Secrets can be extracted from application binaries<br/>just as easily when the published source is not available to the attack[...]
</td></tr>
   </table>>
    ]

Client_Secrets_disclosure_attack -> Client_Secrets_disclosure  [label = " exploits"]

    Client_Secrets_disclosure_countermeasure0 [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Checks on client's security policy
</td></tr>
   </table>>
   ]

     Client_Secrets_disclosure_countermeasure0 -> Client_Secrets_disclosure_attack [label = " mitigates"]

    Client_Secrets_disclosure_countermeasure1 [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Require User Consent for Public Clients without Secret
</td></tr>
   </table>>
   ]

     Client_Secrets_disclosure_countermeasure1 -> Client_Secrets_disclosure_attack [label = " mitigates"]

    Client_Secrets_disclosure_countermeasure2 [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Issue a "client_id" Only in Combination with "redirect_uri"
</td></tr>
   </table>>
   ]

     Client_Secrets_disclosure_countermeasure2 -> Client_Secrets_disclosure_attack [label = " mitigates"]

    Client_Secrets_disclosure_countermeasure3 [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Issue Installation-Specific Client Secrets
</td></tr>
   </table>>
   ]

     Client_Secrets_disclosure_countermeasure3 -> Client_Secrets_disclosure_attack [label = " mitigates"]

    Client_Secrets_disclosure_countermeasure4 [ 
       fillcolor="#FFF2CC", style=filled, shape=polygon, color="#D6B656", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Validate Pre-Registered "redirect_uri"
</td></tr>
   </table>>
   ]

     Client_Secrets_disclosure_countermeasure4 -> Client_Secrets_disclosure_attack [label = " mitigates"]

}
@enduml

