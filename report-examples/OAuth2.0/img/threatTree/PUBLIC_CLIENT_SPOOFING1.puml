 

@startuml
digraph G {
rankdir="BT";
  node [shape=plaintext, fontname="Arial" fontsize="12"];
    PUBLIC_CLIENT_SPOOFING1 [ fillcolor="#F8CECC", style=filled, shape=polygon, color="#B85450"
    label= 
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="center"><b>Threat</b><br/> 

Spoofing, Elevation of privileges, Information Disclosure in Auth User Agent<br/>Redirection, Authorization endpoint for resource owner, Confidential Client
</td></tr>
     <tr><td><table border="0" cellborder="0" cellspacing="8"><tr>
                ret += secObj.linkedImpactMDText()
     <td align="center" href="#OAuth2.0.CONFIDENTIALITY" bgcolor="#EEEEEE"><font color="blue">CONFIDENTIALITY</font></td>
     </tr></table></td></tr>   
   </table>>
   ];
    
PUBLIC_CLIENT_SPOOFING1_attack [ fillcolor="#f5f5f5", style=filled, shape=polygon, color="#666666", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="center"><b>Attack</b><br/>

Authorization servers may wish to automatically process authorization requests<br/>from clients that have been previously authorized by the user. When the user is<br/>redirected to the authorization server's end- user authorization endpoint to<br/>grant access, the authorization server detects that the user has already[...]
</td></tr>
   </table>>
    ]

PUBLIC_CLIENT_SPOOFING1_attack -> PUBLIC_CLIENT_SPOOFING1  [label = " exploits"]

    PUBLIC_CLIENT_SPOOFING1_countermeasure0 [ 
       fillcolor="#D5E8D4", style=filled, shape=polygon, color="#82B366", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Pre-registered redirect URI
</td></tr>
   </table>>
   ]

     PUBLIC_CLIENT_SPOOFING1_countermeasure0 -> PUBLIC_CLIENT_SPOOFING1_attack [label = " mitigates"]

    PUBLIC_CLIENT_SPOOFING1_countermeasure1 [ 
       fillcolor="#FFF2CC", style=filled, shape=polygon, color="#D6B656", label =     
    <<table border="0" cellborder="0" cellspacing="0">
     <tr><td align="left"><b>Countermeasure</b><br/> 

Limiting the scope of access tokens obtained through automated approvals
</td></tr>
   </table>>
   ]

     PUBLIC_CLIENT_SPOOFING1_countermeasure1 -> PUBLIC_CLIENT_SPOOFING1_attack [label = " mitigates"]

}
@enduml

